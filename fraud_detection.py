# -*- coding: utf-8 -*-
"""fraud detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i4uzHhRQgaj2X9GXgCrS9WD5HUD-LpA7
"""

# 1. Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

df = pd.read_csv("creditcard.csv")
df.head()

print("Dataset shape:", df.shape)
print(df['Class'].value_counts())

sns.countplot(x='Class', data=df)
plt.title("Class distribution: 0 = non-fraud, 1 = fraud")
plt.show()

scaler = StandardScaler()
df['normalizedAmount'] = scaler.fit_transform(df['Amount'].values.reshape(-1,1))
df = df.drop(['Time','Amount'], axis=1)
df.head()

X = df.drop('Class', axis=1)
y = df['Class']

# Fix missing/infinite values
df = df.replace([np.inf, -np.inf], np.nan)
df = df.dropna()  # or use df.fillna(df.mean())

# Proceed
X = df.drop('Class', axis=1)
y = df['Class']

X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    test_size=0.2,
                                                    random_state=42,
                                                    stratify=y)

# 8. Model training - Logistic Regression
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# 9. Predict and evaluate
y_pred = model.predict(X_test)
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("Accuracy:", accuracy_score(y_test, y_pred))

# 10. Confusion matrix heatmap
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Example: Take one test transaction
sample = X_test.iloc[0]  # taking the first sample in test set
true_label = y_test.iloc[0]

# Reshape since we are predicting one sample
sample_reshaped = sample.values.reshape(1, -1)

# Predict with model
prediction = model.predict(sample_reshaped)

# Show result
print("Predicted Class:", prediction[0])
print("Actual Class:", true_label)

if prediction[0] == 1:
    print("ðŸ”´ FRAUD DETECTED!")
else:
    print("ðŸŸ¢ Legitimate Transaction")

import matplotlib.pyplot as plt
import seaborn as sns

# Set style
sns.set(style="whitegrid")

# Count of each class
plt.figure(figsize=(6,4))
sns.countplot(x='Class', data=df, palette=['green', 'red'])
plt.title("Legitimate vs Fraudulent Transactions")
plt.xticks([0, 1], ['Legitimate (0)', 'Fraud (1)'])
plt.ylabel("Number of Transactions")
plt.xlabel("Transaction Type")
plt.show()

# Show actual numbers
fraud_count = df['Class'].value_counts()
print("\nðŸ”Ž Transaction Count:")
print("ðŸŸ¢ Legitimate:", fraud_count[0])
print("ðŸ”´ Fraudulent:", fraud_count[1])

from sklearn.metrics import accuracy_score

# Predict on the test set
y_pred = model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)

# Print accuracy
print(f"âœ… Model Accuracy: {accuracy * 100:.2f}%")